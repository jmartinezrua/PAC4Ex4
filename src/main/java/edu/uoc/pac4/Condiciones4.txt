Ejercicio 4 (1.5 puntos) 
Abre el proyecto PAC4Ex4 de IntelliJ. En el package edu.uoc.pac4 del directorio/src/test/java está el archivo con los tests unitarios que te proporcionamos. Además, verás que te proporcionamos la clase SentimentAnalyzer, que contiene 3 métodos que se tienen que codificar (TODO). 
Hasta ahora hemos utilizado estructuras de datos simples para almacenar datos (i.e arrays de Java), pero existen muchos otros tipos de ellas, como por ejemplo los mapas (Map), los conjuntos de datos (Set) o las listas (List). Por ello, en este ejercicio vamos a usar algunas de estas estructuras para poder almacenar valores asociados a otro, poniendo en práctica el uso de algunas de estas estructuras. 
Concretamente, vamos a codificar una clase que permita analizar los sentimientos de distintos textos recibidos, donde se analicen las palabras clave y se contabilicen según si representan un sentimiento positivo o negativo. Para ello, verás que la clase SentimentAnalyzer tiene el atributo SENTIMENT_MAP, que permite determinar el sentimiento que representa cada una de las palabras que contiene. Como habrás notado, el análisis que se llevará a cabo es una versión muy simplificada de lo que debería ser un analizador de sentimientos real, pero sí que permite ilustrar la idea de base de estos. 
Codifica los siguientes métodos siguiendo las siguientes instrucciones: 
&#9679; 
determineSentiment: Este método recibe un mapa (sentimentCounters) donde la clave correspondiente al tipo de sentimiento (positivo o negativo) y el valor contiene el número de palabras que se han encontrado que representan ese sentimiento. Debe devolver la cadena &ldquo;positive&rdquo; si se han encontrado más palabras positivas que negativas, la cadena &ldquo;negative&rdquo; si es al revés y, en caso de empate, debe devolver la cadena &ldquo;neutral&rdquo;. 

&#9679; 
countSentimentWords: Este método recibe una lista de cadenas de texto (String) y debe devolver un mapa de tipo HashMap donde la clave sea una cadena de texto (String) que represente el tipo de sentimiento (positive o negative) y que el valor sea un entero (Integer) que indique la cantidad de palabras que han aparecido en el texto que representen ese sentimiento. Ten en cuenta que se deben tratar todas las palabras de todas las cadenas de texto recibidas. 



Pista: Investiga cómo se puede convertir una cadena de caracteres (String) a un array de Java ignorando los caracteres no alfanuméricos. De esta forma, podrás procesar las palabras una a una. 

Es decir, esta función debería devolver un HashMap que tenga dos claves (positive y negative) y el valor de cada una de ellas debe ser el total de palabras positivas y negativas que se hayan detectado según la clasificación que hace SENTIMENT_MAP. 

&#9679; analyzeTexts: Este método recibe una lista de cadenas de texto (String)y debe devolver el tipo de sentimiento que mejor se ajusta al conjunto de cadenas: positive, negative o neutral. Para ello, debe seguir las indicaciones dadas en los métodos anteriores, por lo que esta función debería reutilizar los dos métodos citados anteriormente. 



Requisito mínimo para evaluar este ejercicio: el programa debe pasar el 
test testDetermineSentiment. 
Nota: el estudiante puede recibir una penalización de hasta 0,5 puntos de la nota obtenida en este ejercicio en función de la calidad de los tests proporcionados. 
(1.5 pts: 0.5 pts. testDetermineSentiment; 
0.75 pts. testCountSentimentWords; 0.25 pts. testAnalyzeTexts) 